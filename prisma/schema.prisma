// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  image              String?
  email              String             @unique
  username           String             @unique
  hashedPassword     String
  underReview        Boolean            @default(false)
  isAdmin            Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  games              UserFavoriteGame[]
  achievements       UserAchievement[]
  gamePosts          GamePost[]
  achievementPosts   AchievementPost[]
  sessions           Session[]
  accounts           Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String  @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  indentifier String
  token       String   @unique
  expires     DateTime

  @@unique([indentifier, token])
}

model UserFavoriteGame {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  gameId      String  @db.ObjectId
  isCompleted Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  game        Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model UserAchievement {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  achievementId String      @db.ObjectId
  isUnlocked    Boolean     @default(false)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Game {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  title        String             @unique
  description  String
  image        String
  favoritedBy  UserFavoriteGame[]
  gamePosts    GamePost[]
  achievements Achievement[]
}

model GamePost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  private   Boolean  @default(false)
  userId    String   @db.ObjectId
  gameId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  image            String
  gameId           String            @db.ObjectId
  unlockedBy       UserAchievement[]
  achievementPosts AchievementPost[]

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model AchievementPost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  body          String
  likes         Int      @default(0)
  dislikes      Int      @default(0)
  private       Boolean  @default(false)
  userId        String   @db.ObjectId
  achievementId String   @db.ObjectId
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
}
